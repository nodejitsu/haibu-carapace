#!/usr/bin/env node

var path = require('path'),
    async = require('async'),
    carapace = require('../lib/carapace');

//
// Extract the carapace CLI arguments for this
// process.
//
var argv = carapace.cli.argv(),
    script = argv._[0];

function onPluginError (info) {
  //
  // If any of the plugins have failed to load then short
  // circuit this carapace process because it requested them all.
  //
  console.log('Error loading plugin: ' + info.plugin);
  console.log(info.error.message);
  console.dir(info.error.stack.split('\n'));
  process.exit(1);
}

//
// Setup the passthru arguments.
//
var passthru = carapace.cli.extract(null, script);

//
// Remark: Calling `carapace.listen()` with no
// arguments will fall-back to the default `hook-*`
// CLI options since 
//
carapace.start(argv, function () {
  function configure (next) {
    if (!Array.isArray(argv.plugin)) {
      argv.plugin = [argv.plugin];
    }
    
    //
    // Listen for errors when loading plugins
    //
    carapace.on('carapace::plugin::error', onPluginError);
    
    var plugins = argv.plugin.map(function (plugin) { 
      return carapace.load(plugin);
    });
    
    carapace.use(plugins, function () {
      var names = argv.plugin.map(function (plugin) {
        return path.basename(plugin, '.js');
      })
      
      async.forEachSeries(names, function (plugin, next) {
        if (!carapace[plugin]) {
          return onPluginError({
            plugin: plugin,
            error: new Error('No plugin `' + plugin + '` was found after loading.')
          });
        }

        carapace[plugin](argv[plugin], function (err) {
          return !err ? next() : onPluginError({
            plugin: plugin, 
            error: err
          });
        });
      }, next);      
    });
  }
  
  function runAndReport () {
    carapace.run(script, passthru, true, function () {
      console.log('carapace has wrapped: ' + script);
      
      function logArray (array, msg, delim) {
        return array && array.length 
          ? console.log(msg + array.join(delim))
          : null;
      }
      
      logArray(passthru, 'with arguments: ', ' ');
      logArray(Object.keys(carapace._module.exports), '  and exports: ', ', ');
    });
  }
    
  return argv.plugin
    ? configure(runAndReport)
    : runAndReport();
});
